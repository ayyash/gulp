import { Component, OnInit, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';
import { UntypedFormGroup, UntypedFormBuilder, ReactiveFormsModule } from '@angular/forms';
import { IViewMode } from '../models/viewmode.model';
import { Toast } from '../../lib/toast';
/* STANDALONE */
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { MdInputModule } from '../../lib/mdinput/mdinput.module';
/* ENDSTANDALONE */


@Component({
    _selector_
    templateUrl: './viewpath.html',
    changeDetection: ChangeDetectionStrategy.OnPush
	 /* STANDALONE */
	 , standalone: true
	 , imports: [CommonModule, RouterModule, ReactiveFormsModule, MdInputModule]
	 /* ENDSTANDALONE */
})
export class MajorNamePartialComponent implements OnInit {

    // Add types
    @Input() mode: IViewMode = {forNew: true};

    @Output() onSave: EventEmitter<any> = new EventEmitter<any>();
    @Output() onCancel: EventEmitter<void> = new EventEmitter();

    forceValidation = false;
    majorForm: FormGroup;

    constructor(private fb: FormBuilder, private toast: Toast) {
        //
    }
    ngOnInit(): void {
        //
        this.majorForm = this.fb.group({
            fieldname: [],
            fieldgroup: this.fb.group({
                fieldname: []
            }),
            list: []
        });
    }

    // use to compare for initial select... keep '=='
    compareFn(c1: any, c2: any): boolean {
        // tslint:disable-next-line:triple-equals
        return c1 && c2 ? c1.id == c2.id : false;
    }

    saveMajor(): void {
        this.forceValidation = false;
        this.toast.Hide();


        if (this.majorForm.valid) {
            // clone into a new object
            const _value = this.majorForm.value;

            const _major = { ..._value};

            // then emit
            this.onSave.emit(_major);
        } else {
            this.forceValidation = true;
            this.toast.Show('INVALID_FORM', { sticky: false, extracss: 'error' });
        }
    }
}
